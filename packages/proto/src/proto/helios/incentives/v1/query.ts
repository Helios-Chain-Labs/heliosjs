// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v5.29.1
// source: helios/incentives/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin";
import { Params } from "./genesis";
import { GasMeter, Incentive } from "./incentives";

export const protobufPackage = "helios.incentives.v1";

/**
 * QueryIncentivesRequest is the request type for the Query/Incentives RPC
 * method.
 */
export interface QueryIncentivesRequest {
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryIncentivesResponse is the response type for the Query/Incentives RPC
 * method.
 */
export interface QueryIncentivesResponse {
  incentives: Incentive[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/** QueryIncentiveRequest is the request type for the Query/Incentive RPC method. */
export interface QueryIncentiveRequest {
  /** contract identifier is the hex contract address of a contract */
  contract: string;
}

/**
 * QueryIncentiveResponse is the response type for the Query/Incentive RPC
 * method.
 */
export interface QueryIncentiveResponse {
  incentive: Incentive | undefined;
}

/**
 * QueryGasMetersRequest is the request type for the Query/Incentives RPC
 * method.
 */
export interface QueryGasMetersRequest {
  /** contract is the hex contract address of a incentivized smart contract */
  contract: string;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryGasMetersResponse is the response type for the Query/Incentives RPC
 * method.
 */
export interface QueryGasMetersResponse {
  gasMeters: GasMeter[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/** QueryGasMeterRequest is the request type for the Query/Incentive RPC method. */
export interface QueryGasMeterRequest {
  /** contract identifier is the hex contract address of a contract */
  contract: string;
  /** participant identifier is the hex address of a user */
  participant: string;
}

/**
 * QueryGasMeterResponse is the response type for the Query/Incentive RPC
 * method.
 */
export interface QueryGasMeterResponse {
  gasMeter: number;
}

/**
 * QueryAllocationMetersRequest is the request type for the
 * Query/AllocationMeters RPC method.
 */
export interface QueryAllocationMetersRequest {
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryAllocationMetersResponse is the response type for the
 * Query/AllocationMeters RPC method.
 */
export interface QueryAllocationMetersResponse {
  allocationMeters: DecCoin[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryAllocationMeterRequest is the request type for the Query/AllocationMeter
 * RPC method.
 */
export interface QueryAllocationMeterRequest {
  /** denom is the coin denom to query an allocation meter for. */
  denom: string;
}

/**
 * QueryAllocationMeterResponse is the response type for the
 * Query/AllocationMeter RPC method.
 */
export interface QueryAllocationMeterResponse {
  allocationMeter: DecCoin | undefined;
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC
 * method.
 */
export interface QueryParamsResponse {
  params: Params | undefined;
}

function createBaseQueryIncentivesRequest(): QueryIncentivesRequest {
  return { pagination: undefined };
}

export const QueryIncentivesRequest: MessageFns<QueryIncentivesRequest> = {
  encode(message: QueryIncentivesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIncentivesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIncentivesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIncentivesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryIncentivesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIncentivesRequest>, I>>(base?: I): QueryIncentivesRequest {
    return QueryIncentivesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIncentivesRequest>, I>>(object: I): QueryIncentivesRequest {
    const message = createBaseQueryIncentivesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryIncentivesResponse(): QueryIncentivesResponse {
  return { incentives: [], pagination: undefined };
}

export const QueryIncentivesResponse: MessageFns<QueryIncentivesResponse> = {
  encode(message: QueryIncentivesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.incentives) {
      Incentive.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIncentivesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIncentivesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.incentives.push(Incentive.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIncentivesResponse {
    return {
      incentives: globalThis.Array.isArray(object?.incentives)
        ? object.incentives.map((e: any) => Incentive.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryIncentivesResponse): unknown {
    const obj: any = {};
    if (message.incentives?.length) {
      obj.incentives = message.incentives.map((e) => Incentive.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIncentivesResponse>, I>>(base?: I): QueryIncentivesResponse {
    return QueryIncentivesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIncentivesResponse>, I>>(object: I): QueryIncentivesResponse {
    const message = createBaseQueryIncentivesResponse();
    message.incentives = object.incentives?.map((e) => Incentive.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryIncentiveRequest(): QueryIncentiveRequest {
  return { contract: "" };
}

export const QueryIncentiveRequest: MessageFns<QueryIncentiveRequest> = {
  encode(message: QueryIncentiveRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contract !== "") {
      writer.uint32(10).string(message.contract);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIncentiveRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIncentiveRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contract = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIncentiveRequest {
    return { contract: isSet(object.contract) ? globalThis.String(object.contract) : "" };
  },

  toJSON(message: QueryIncentiveRequest): unknown {
    const obj: any = {};
    if (message.contract !== "") {
      obj.contract = message.contract;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIncentiveRequest>, I>>(base?: I): QueryIncentiveRequest {
    return QueryIncentiveRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIncentiveRequest>, I>>(object: I): QueryIncentiveRequest {
    const message = createBaseQueryIncentiveRequest();
    message.contract = object.contract ?? "";
    return message;
  },
};

function createBaseQueryIncentiveResponse(): QueryIncentiveResponse {
  return { incentive: undefined };
}

export const QueryIncentiveResponse: MessageFns<QueryIncentiveResponse> = {
  encode(message: QueryIncentiveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.incentive !== undefined) {
      Incentive.encode(message.incentive, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryIncentiveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryIncentiveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.incentive = Incentive.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryIncentiveResponse {
    return { incentive: isSet(object.incentive) ? Incentive.fromJSON(object.incentive) : undefined };
  },

  toJSON(message: QueryIncentiveResponse): unknown {
    const obj: any = {};
    if (message.incentive !== undefined) {
      obj.incentive = Incentive.toJSON(message.incentive);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryIncentiveResponse>, I>>(base?: I): QueryIncentiveResponse {
    return QueryIncentiveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryIncentiveResponse>, I>>(object: I): QueryIncentiveResponse {
    const message = createBaseQueryIncentiveResponse();
    message.incentive = (object.incentive !== undefined && object.incentive !== null)
      ? Incentive.fromPartial(object.incentive)
      : undefined;
    return message;
  },
};

function createBaseQueryGasMetersRequest(): QueryGasMetersRequest {
  return { contract: "", pagination: undefined };
}

export const QueryGasMetersRequest: MessageFns<QueryGasMetersRequest> = {
  encode(message: QueryGasMetersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contract !== "") {
      writer.uint32(10).string(message.contract);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGasMetersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGasMetersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contract = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGasMetersRequest {
    return {
      contract: isSet(object.contract) ? globalThis.String(object.contract) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryGasMetersRequest): unknown {
    const obj: any = {};
    if (message.contract !== "") {
      obj.contract = message.contract;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGasMetersRequest>, I>>(base?: I): QueryGasMetersRequest {
    return QueryGasMetersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGasMetersRequest>, I>>(object: I): QueryGasMetersRequest {
    const message = createBaseQueryGasMetersRequest();
    message.contract = object.contract ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGasMetersResponse(): QueryGasMetersResponse {
  return { gasMeters: [], pagination: undefined };
}

export const QueryGasMetersResponse: MessageFns<QueryGasMetersResponse> = {
  encode(message: QueryGasMetersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.gasMeters) {
      GasMeter.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGasMetersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGasMetersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.gasMeters.push(GasMeter.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGasMetersResponse {
    return {
      gasMeters: globalThis.Array.isArray(object?.gasMeters)
        ? object.gasMeters.map((e: any) => GasMeter.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryGasMetersResponse): unknown {
    const obj: any = {};
    if (message.gasMeters?.length) {
      obj.gasMeters = message.gasMeters.map((e) => GasMeter.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGasMetersResponse>, I>>(base?: I): QueryGasMetersResponse {
    return QueryGasMetersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGasMetersResponse>, I>>(object: I): QueryGasMetersResponse {
    const message = createBaseQueryGasMetersResponse();
    message.gasMeters = object.gasMeters?.map((e) => GasMeter.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGasMeterRequest(): QueryGasMeterRequest {
  return { contract: "", participant: "" };
}

export const QueryGasMeterRequest: MessageFns<QueryGasMeterRequest> = {
  encode(message: QueryGasMeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.contract !== "") {
      writer.uint32(10).string(message.contract);
    }
    if (message.participant !== "") {
      writer.uint32(18).string(message.participant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGasMeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGasMeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.contract = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.participant = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGasMeterRequest {
    return {
      contract: isSet(object.contract) ? globalThis.String(object.contract) : "",
      participant: isSet(object.participant) ? globalThis.String(object.participant) : "",
    };
  },

  toJSON(message: QueryGasMeterRequest): unknown {
    const obj: any = {};
    if (message.contract !== "") {
      obj.contract = message.contract;
    }
    if (message.participant !== "") {
      obj.participant = message.participant;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGasMeterRequest>, I>>(base?: I): QueryGasMeterRequest {
    return QueryGasMeterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGasMeterRequest>, I>>(object: I): QueryGasMeterRequest {
    const message = createBaseQueryGasMeterRequest();
    message.contract = object.contract ?? "";
    message.participant = object.participant ?? "";
    return message;
  },
};

function createBaseQueryGasMeterResponse(): QueryGasMeterResponse {
  return { gasMeter: 0 };
}

export const QueryGasMeterResponse: MessageFns<QueryGasMeterResponse> = {
  encode(message: QueryGasMeterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gasMeter !== 0) {
      writer.uint32(8).uint64(message.gasMeter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGasMeterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGasMeterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gasMeter = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGasMeterResponse {
    return { gasMeter: isSet(object.gasMeter) ? globalThis.Number(object.gasMeter) : 0 };
  },

  toJSON(message: QueryGasMeterResponse): unknown {
    const obj: any = {};
    if (message.gasMeter !== 0) {
      obj.gasMeter = Math.round(message.gasMeter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGasMeterResponse>, I>>(base?: I): QueryGasMeterResponse {
    return QueryGasMeterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGasMeterResponse>, I>>(object: I): QueryGasMeterResponse {
    const message = createBaseQueryGasMeterResponse();
    message.gasMeter = object.gasMeter ?? 0;
    return message;
  },
};

function createBaseQueryAllocationMetersRequest(): QueryAllocationMetersRequest {
  return { pagination: undefined };
}

export const QueryAllocationMetersRequest: MessageFns<QueryAllocationMetersRequest> = {
  encode(message: QueryAllocationMetersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllocationMetersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllocationMetersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllocationMetersRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllocationMetersRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllocationMetersRequest>, I>>(base?: I): QueryAllocationMetersRequest {
    return QueryAllocationMetersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllocationMetersRequest>, I>>(object: I): QueryAllocationMetersRequest {
    const message = createBaseQueryAllocationMetersRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllocationMetersResponse(): QueryAllocationMetersResponse {
  return { allocationMeters: [], pagination: undefined };
}

export const QueryAllocationMetersResponse: MessageFns<QueryAllocationMetersResponse> = {
  encode(message: QueryAllocationMetersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.allocationMeters) {
      DecCoin.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllocationMetersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllocationMetersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allocationMeters.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllocationMetersResponse {
    return {
      allocationMeters: globalThis.Array.isArray(object?.allocationMeters)
        ? object.allocationMeters.map((e: any) => DecCoin.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAllocationMetersResponse): unknown {
    const obj: any = {};
    if (message.allocationMeters?.length) {
      obj.allocationMeters = message.allocationMeters.map((e) => DecCoin.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllocationMetersResponse>, I>>(base?: I): QueryAllocationMetersResponse {
    return QueryAllocationMetersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllocationMetersResponse>, I>>(
    object: I,
  ): QueryAllocationMetersResponse {
    const message = createBaseQueryAllocationMetersResponse();
    message.allocationMeters = object.allocationMeters?.map((e) => DecCoin.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryAllocationMeterRequest(): QueryAllocationMeterRequest {
  return { denom: "" };
}

export const QueryAllocationMeterRequest: MessageFns<QueryAllocationMeterRequest> = {
  encode(message: QueryAllocationMeterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllocationMeterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllocationMeterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllocationMeterRequest {
    return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
  },

  toJSON(message: QueryAllocationMeterRequest): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllocationMeterRequest>, I>>(base?: I): QueryAllocationMeterRequest {
    return QueryAllocationMeterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllocationMeterRequest>, I>>(object: I): QueryAllocationMeterRequest {
    const message = createBaseQueryAllocationMeterRequest();
    message.denom = object.denom ?? "";
    return message;
  },
};

function createBaseQueryAllocationMeterResponse(): QueryAllocationMeterResponse {
  return { allocationMeter: undefined };
}

export const QueryAllocationMeterResponse: MessageFns<QueryAllocationMeterResponse> = {
  encode(message: QueryAllocationMeterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allocationMeter !== undefined) {
      DecCoin.encode(message.allocationMeter, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllocationMeterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllocationMeterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allocationMeter = DecCoin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllocationMeterResponse {
    return { allocationMeter: isSet(object.allocationMeter) ? DecCoin.fromJSON(object.allocationMeter) : undefined };
  },

  toJSON(message: QueryAllocationMeterResponse): unknown {
    const obj: any = {};
    if (message.allocationMeter !== undefined) {
      obj.allocationMeter = DecCoin.toJSON(message.allocationMeter);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryAllocationMeterResponse>, I>>(base?: I): QueryAllocationMeterResponse {
    return QueryAllocationMeterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryAllocationMeterResponse>, I>>(object: I): QueryAllocationMeterResponse {
    const message = createBaseQueryAllocationMeterResponse();
    message.allocationMeter = (object.allocationMeter !== undefined && object.allocationMeter !== null)
      ? DecCoin.fromPartial(object.allocationMeter)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Incentives retrieves registered incentives */
  Incentives(request: QueryIncentivesRequest): Promise<QueryIncentivesResponse>;
  /** Incentive retrieves a registered incentive */
  Incentive(request: QueryIncentiveRequest): Promise<QueryIncentiveResponse>;
  /** GasMeters retrieves active gas meters for a given contract */
  GasMeters(request: QueryGasMetersRequest): Promise<QueryGasMetersResponse>;
  /** GasMeter Retrieves a active gas meter */
  GasMeter(request: QueryGasMeterRequest): Promise<QueryGasMeterResponse>;
  /**
   * AllocationMeters retrieves active allocation meters for a given
   * denomination
   */
  AllocationMeters(request: QueryAllocationMetersRequest): Promise<QueryAllocationMetersResponse>;
  /** AllocationMeter Retrieves a active gas meter */
  AllocationMeter(request: QueryAllocationMeterRequest): Promise<QueryAllocationMeterResponse>;
  /** Params retrieves the incentives module params */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}

export const QueryServiceName = "helios.incentives.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Incentives = this.Incentives.bind(this);
    this.Incentive = this.Incentive.bind(this);
    this.GasMeters = this.GasMeters.bind(this);
    this.GasMeter = this.GasMeter.bind(this);
    this.AllocationMeters = this.AllocationMeters.bind(this);
    this.AllocationMeter = this.AllocationMeter.bind(this);
    this.Params = this.Params.bind(this);
  }
  Incentives(request: QueryIncentivesRequest): Promise<QueryIncentivesResponse> {
    const data = QueryIncentivesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Incentives", data);
    return promise.then((data) => QueryIncentivesResponse.decode(new BinaryReader(data)));
  }

  Incentive(request: QueryIncentiveRequest): Promise<QueryIncentiveResponse> {
    const data = QueryIncentiveRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Incentive", data);
    return promise.then((data) => QueryIncentiveResponse.decode(new BinaryReader(data)));
  }

  GasMeters(request: QueryGasMetersRequest): Promise<QueryGasMetersResponse> {
    const data = QueryGasMetersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GasMeters", data);
    return promise.then((data) => QueryGasMetersResponse.decode(new BinaryReader(data)));
  }

  GasMeter(request: QueryGasMeterRequest): Promise<QueryGasMeterResponse> {
    const data = QueryGasMeterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GasMeter", data);
    return promise.then((data) => QueryGasMeterResponse.decode(new BinaryReader(data)));
  }

  AllocationMeters(request: QueryAllocationMetersRequest): Promise<QueryAllocationMetersResponse> {
    const data = QueryAllocationMetersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocationMeters", data);
    return promise.then((data) => QueryAllocationMetersResponse.decode(new BinaryReader(data)));
  }

  AllocationMeter(request: QueryAllocationMeterRequest): Promise<QueryAllocationMeterResponse> {
    const data = QueryAllocationMeterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AllocationMeter", data);
    return promise.then((data) => QueryAllocationMeterResponse.decode(new BinaryReader(data)));
  }

  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
