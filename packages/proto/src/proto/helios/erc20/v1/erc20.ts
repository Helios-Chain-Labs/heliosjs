// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v5.29.1
// source: helios/erc20/v1/erc20.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "../../../cosmos/bank/v1beta1/bank";

export const protobufPackage = "helios.erc20.v1";

/**
 * Copyright Tharsis Labs Ltd.(Evmos)
 * SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/evmos/blob/main/LICENSE)
 */

/** Owner enumerates the ownership of a ERC20 contract. */
export enum Owner {
  /** OWNER_UNSPECIFIED - OWNER_UNSPECIFIED defines an invalid/undefined owner. */
  OWNER_UNSPECIFIED = 0,
  /** OWNER_MODULE - OWNER_MODULE - erc20 is owned by the erc20 module account. */
  OWNER_MODULE = 1,
  /** OWNER_EXTERNAL - OWNER_EXTERNAL - erc20 is owned by an external account. */
  OWNER_EXTERNAL = 2,
  UNRECOGNIZED = -1,
}

export function ownerFromJSON(object: any): Owner {
  switch (object) {
    case 0:
    case "OWNER_UNSPECIFIED":
      return Owner.OWNER_UNSPECIFIED;
    case 1:
    case "OWNER_MODULE":
      return Owner.OWNER_MODULE;
    case 2:
    case "OWNER_EXTERNAL":
      return Owner.OWNER_EXTERNAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Owner.UNRECOGNIZED;
  }
}

export function ownerToJSON(object: Owner): string {
  switch (object) {
    case Owner.OWNER_UNSPECIFIED:
      return "OWNER_UNSPECIFIED";
    case Owner.OWNER_MODULE:
      return "OWNER_MODULE";
    case Owner.OWNER_EXTERNAL:
      return "OWNER_EXTERNAL";
    case Owner.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * TokenPair defines an instance that records a pairing consisting of a native
 * Cosmos Coin and an ERC20 token address.
 */
export interface TokenPair {
  /** erc20_address is the hex address of ERC20 contract token */
  erc20Address: string;
  /** denom defines the cosmos base denomination to be mapped to */
  denom: string;
  /** enabled defines the token mapping enable status */
  enabled: boolean;
  /**
   * contract_owner is the an ENUM specifying the type of ERC20 owner (0
   * invalid, 1 ModuleAccount, 2 external address)
   */
  contractOwner: Owner;
}

/**
 * Deprecated: RegisterCoinProposal is a gov Content type to register a token
 * pair for a native Cosmos coin. We're keeping it to remove the existing
 * proposals from store. After that, remove this message. NOTE: Keep this
 * message for backwards compatibility on proposals query
 */
export interface RegisterCoinProposal {
  /** title of the proposal */
  title: string;
  /** description of the proposal */
  description: string;
  /** metadata slice of the native Cosmos coins */
  metadata: Metadata[];
}

/**
 * Deprecated: ProposalMetadata is used to parse a slice of denom metadata and
 * generate the RegisterCoinProposal content. We're keeping it to remove the
 * existing proposals from store. After that, remove this message.
 */
export interface ProposalMetadata {
  /** metadata slice of the native Cosmos coins */
  metadata: Metadata[];
}

/**
 * Deprecated: RegisterERC20Proposal is a gov Content type to register a token
 * pair for an ERC20 token. NOTE: Keep this message for backwards compatibility
 * on proposals query
 */
export interface RegisterERC20Proposal {
  /** title of the proposal */
  title: string;
  /** description of the proposal */
  description: string;
  /** erc20addresses is a slice of  ERC20 token contract addresses */
  erc20addresses: string[];
}

/**
 * Deprecated: ToggleTokenConversionProposal is a gov Content type to toggle the
 * conversion of a token pair. NOTE: Keep this message for backwards
 * compatibility on proposals query
 */
export interface ToggleTokenConversionProposal {
  /** title of the proposal */
  title: string;
  /** description of the proposal */
  description: string;
  /**
   * token identifier can be either the hex contract address of the ERC20 or the
   * Cosmos base denomination
   */
  token: string;
}

export interface AddNewAssetConsensusProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** List of assets to whitelist */
  assets: Asset[];
}

export interface RemoveAssetConsensusProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** List of asset denominations to remove */
  denoms: string[];
}

export interface UpdateAssetConsensusProposal {
  /** Title of the proposal */
  title: string;
  /** Description of the proposal */
  description: string;
  /** List of weight updates */
  updates: WeightUpdate[];
}

export interface Asset {
  /** Asset denomination (e.g., USDT, DAI) */
  denom: string;
  /** Smart contract address of the asset */
  contractAddress: string;
  /** Chain ID of the blockchain hosting the asset */
  chainId: string;
  /** Number of decimal places */
  decimals: number;
  /** Base weight for rewards calculation */
  baseWeight: number;
  /** Additional metadata (e.g., description or URL) */
  metadata: string;
}

export interface WeightUpdate {
  /** Asset denomination (e.g., ETH, BNB, USDT) */
  denom: string;
  /** Magnitude of weight change: small, medium, or high */
  magnitude: string;
  /** Direction of weight change: up or down */
  direction: string;
}

function createBaseTokenPair(): TokenPair {
  return { erc20Address: "", denom: "", enabled: false, contractOwner: 0 };
}

export const TokenPair: MessageFns<TokenPair> = {
  encode(message: TokenPair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.erc20Address !== "") {
      writer.uint32(10).string(message.erc20Address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.enabled !== false) {
      writer.uint32(24).bool(message.enabled);
    }
    if (message.contractOwner !== 0) {
      writer.uint32(32).int32(message.contractOwner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TokenPair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTokenPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.erc20Address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.contractOwner = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TokenPair {
    return {
      erc20Address: isSet(object.erc20Address) ? globalThis.String(object.erc20Address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      contractOwner: isSet(object.contractOwner) ? ownerFromJSON(object.contractOwner) : 0,
    };
  },

  toJSON(message: TokenPair): unknown {
    const obj: any = {};
    if (message.erc20Address !== "") {
      obj.erc20Address = message.erc20Address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.contractOwner !== 0) {
      obj.contractOwner = ownerToJSON(message.contractOwner);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TokenPair>, I>>(base?: I): TokenPair {
    return TokenPair.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TokenPair>, I>>(object: I): TokenPair {
    const message = createBaseTokenPair();
    message.erc20Address = object.erc20Address ?? "";
    message.denom = object.denom ?? "";
    message.enabled = object.enabled ?? false;
    message.contractOwner = object.contractOwner ?? 0;
    return message;
  },
};

function createBaseRegisterCoinProposal(): RegisterCoinProposal {
  return { title: "", description: "", metadata: [] };
}

export const RegisterCoinProposal: MessageFns<RegisterCoinProposal> = {
  encode(message: RegisterCoinProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.metadata) {
      Metadata.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterCoinProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterCoinProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata.push(Metadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterCoinProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      metadata: globalThis.Array.isArray(object?.metadata) ? object.metadata.map((e: any) => Metadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: RegisterCoinProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterCoinProposal>, I>>(base?: I): RegisterCoinProposal {
    return RegisterCoinProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterCoinProposal>, I>>(object: I): RegisterCoinProposal {
    const message = createBaseRegisterCoinProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.metadata = object.metadata?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseProposalMetadata(): ProposalMetadata {
  return { metadata: [] };
}

export const ProposalMetadata: MessageFns<ProposalMetadata> = {
  encode(message: ProposalMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.metadata) {
      Metadata.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProposalMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProposalMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata.push(Metadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProposalMetadata {
    return {
      metadata: globalThis.Array.isArray(object?.metadata) ? object.metadata.map((e: any) => Metadata.fromJSON(e)) : [],
    };
  },

  toJSON(message: ProposalMetadata): unknown {
    const obj: any = {};
    if (message.metadata?.length) {
      obj.metadata = message.metadata.map((e) => Metadata.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProposalMetadata>, I>>(base?: I): ProposalMetadata {
    return ProposalMetadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProposalMetadata>, I>>(object: I): ProposalMetadata {
    const message = createBaseProposalMetadata();
    message.metadata = object.metadata?.map((e) => Metadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRegisterERC20Proposal(): RegisterERC20Proposal {
  return { title: "", description: "", erc20addresses: [] };
}

export const RegisterERC20Proposal: MessageFns<RegisterERC20Proposal> = {
  encode(message: RegisterERC20Proposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.erc20addresses) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterERC20Proposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterERC20Proposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.erc20addresses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterERC20Proposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      erc20addresses: globalThis.Array.isArray(object?.erc20addresses)
        ? object.erc20addresses.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: RegisterERC20Proposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.erc20addresses?.length) {
      obj.erc20addresses = message.erc20addresses;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterERC20Proposal>, I>>(base?: I): RegisterERC20Proposal {
    return RegisterERC20Proposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterERC20Proposal>, I>>(object: I): RegisterERC20Proposal {
    const message = createBaseRegisterERC20Proposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.erc20addresses = object.erc20addresses?.map((e) => e) || [];
    return message;
  },
};

function createBaseToggleTokenConversionProposal(): ToggleTokenConversionProposal {
  return { title: "", description: "", token: "" };
}

export const ToggleTokenConversionProposal: MessageFns<ToggleTokenConversionProposal> = {
  encode(message: ToggleTokenConversionProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ToggleTokenConversionProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToggleTokenConversionProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ToggleTokenConversionProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: ToggleTokenConversionProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ToggleTokenConversionProposal>, I>>(base?: I): ToggleTokenConversionProposal {
    return ToggleTokenConversionProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ToggleTokenConversionProposal>, I>>(
    object: I,
  ): ToggleTokenConversionProposal {
    const message = createBaseToggleTokenConversionProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseAddNewAssetConsensusProposal(): AddNewAssetConsensusProposal {
  return { title: "", description: "", assets: [] };
}

export const AddNewAssetConsensusProposal: MessageFns<AddNewAssetConsensusProposal> = {
  encode(message: AddNewAssetConsensusProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.assets) {
      Asset.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddNewAssetConsensusProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddNewAssetConsensusProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.assets.push(Asset.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddNewAssetConsensusProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      assets: globalThis.Array.isArray(object?.assets) ? object.assets.map((e: any) => Asset.fromJSON(e)) : [],
    };
  },

  toJSON(message: AddNewAssetConsensusProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.assets?.length) {
      obj.assets = message.assets.map((e) => Asset.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddNewAssetConsensusProposal>, I>>(base?: I): AddNewAssetConsensusProposal {
    return AddNewAssetConsensusProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddNewAssetConsensusProposal>, I>>(object: I): AddNewAssetConsensusProposal {
    const message = createBaseAddNewAssetConsensusProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.assets = object.assets?.map((e) => Asset.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRemoveAssetConsensusProposal(): RemoveAssetConsensusProposal {
  return { title: "", description: "", denoms: [] };
}

export const RemoveAssetConsensusProposal: MessageFns<RemoveAssetConsensusProposal> = {
  encode(message: RemoveAssetConsensusProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.denoms) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RemoveAssetConsensusProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRemoveAssetConsensusProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denoms.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RemoveAssetConsensusProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      denoms: globalThis.Array.isArray(object?.denoms) ? object.denoms.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: RemoveAssetConsensusProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.denoms?.length) {
      obj.denoms = message.denoms;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RemoveAssetConsensusProposal>, I>>(base?: I): RemoveAssetConsensusProposal {
    return RemoveAssetConsensusProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RemoveAssetConsensusProposal>, I>>(object: I): RemoveAssetConsensusProposal {
    const message = createBaseRemoveAssetConsensusProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.denoms = object.denoms?.map((e) => e) || [];
    return message;
  },
};

function createBaseUpdateAssetConsensusProposal(): UpdateAssetConsensusProposal {
  return { title: "", description: "", updates: [] };
}

export const UpdateAssetConsensusProposal: MessageFns<UpdateAssetConsensusProposal> = {
  encode(message: UpdateAssetConsensusProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.updates) {
      WeightUpdate.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateAssetConsensusProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateAssetConsensusProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updates.push(WeightUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateAssetConsensusProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      updates: globalThis.Array.isArray(object?.updates)
        ? object.updates.map((e: any) => WeightUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateAssetConsensusProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.updates?.length) {
      obj.updates = message.updates.map((e) => WeightUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateAssetConsensusProposal>, I>>(base?: I): UpdateAssetConsensusProposal {
    return UpdateAssetConsensusProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateAssetConsensusProposal>, I>>(object: I): UpdateAssetConsensusProposal {
    const message = createBaseUpdateAssetConsensusProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.updates = object.updates?.map((e) => WeightUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAsset(): Asset {
  return { denom: "", contractAddress: "", chainId: "", decimals: 0, baseWeight: 0, metadata: "" };
}

export const Asset: MessageFns<Asset> = {
  encode(message: Asset, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.contractAddress !== "") {
      writer.uint32(18).string(message.contractAddress);
    }
    if (message.chainId !== "") {
      writer.uint32(26).string(message.chainId);
    }
    if (message.decimals !== 0) {
      writer.uint32(32).uint64(message.decimals);
    }
    if (message.baseWeight !== 0) {
      writer.uint32(40).uint64(message.baseWeight);
    }
    if (message.metadata !== "") {
      writer.uint32(50).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Asset {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAsset();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.contractAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.decimals = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.baseWeight = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Asset {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      contractAddress: isSet(object.contractAddress) ? globalThis.String(object.contractAddress) : "",
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      decimals: isSet(object.decimals) ? globalThis.Number(object.decimals) : 0,
      baseWeight: isSet(object.baseWeight) ? globalThis.Number(object.baseWeight) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: Asset): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.contractAddress !== "") {
      obj.contractAddress = message.contractAddress;
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.decimals !== 0) {
      obj.decimals = Math.round(message.decimals);
    }
    if (message.baseWeight !== 0) {
      obj.baseWeight = Math.round(message.baseWeight);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Asset>, I>>(base?: I): Asset {
    return Asset.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Asset>, I>>(object: I): Asset {
    const message = createBaseAsset();
    message.denom = object.denom ?? "";
    message.contractAddress = object.contractAddress ?? "";
    message.chainId = object.chainId ?? "";
    message.decimals = object.decimals ?? 0;
    message.baseWeight = object.baseWeight ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

function createBaseWeightUpdate(): WeightUpdate {
  return { denom: "", magnitude: "", direction: "" };
}

export const WeightUpdate: MessageFns<WeightUpdate> = {
  encode(message: WeightUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.denom !== "") {
      writer.uint32(10).string(message.denom);
    }
    if (message.magnitude !== "") {
      writer.uint32(18).string(message.magnitude);
    }
    if (message.direction !== "") {
      writer.uint32(26).string(message.direction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WeightUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWeightUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.magnitude = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.direction = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WeightUpdate {
    return {
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      magnitude: isSet(object.magnitude) ? globalThis.String(object.magnitude) : "",
      direction: isSet(object.direction) ? globalThis.String(object.direction) : "",
    };
  },

  toJSON(message: WeightUpdate): unknown {
    const obj: any = {};
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.magnitude !== "") {
      obj.magnitude = message.magnitude;
    }
    if (message.direction !== "") {
      obj.direction = message.direction;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WeightUpdate>, I>>(base?: I): WeightUpdate {
    return WeightUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WeightUpdate>, I>>(object: I): WeightUpdate {
    const message = createBaseWeightUpdate();
    message.denom = object.denom ?? "";
    message.magnitude = object.magnitude ?? "";
    message.direction = object.direction ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
