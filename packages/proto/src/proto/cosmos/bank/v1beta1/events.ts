/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.28.3
 * source: cosmos/bank/v1beta1/events.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos_proto/cosmos";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./../../../amino/amino";
import * as pb_1 from "google-protobuf";
export namespace cosmos.bank.v1beta1 {
    export class EventSetBalances extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance_updates?: BalanceUpdate[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance_updates" in data && data.balance_updates != undefined) {
                    this.balance_updates = data.balance_updates;
                }
            }
        }
        get balance_updates() {
            return pb_1.Message.getRepeatedWrapperField(this, BalanceUpdate, 1) as BalanceUpdate[];
        }
        set balance_updates(value: BalanceUpdate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            balance_updates?: ReturnType<typeof BalanceUpdate.prototype.toObject>[];
        }): EventSetBalances {
            const message = new EventSetBalances({});
            if (data.balance_updates != null) {
                message.balance_updates = data.balance_updates.map(item => BalanceUpdate.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                balance_updates?: ReturnType<typeof BalanceUpdate.prototype.toObject>[];
            } = {};
            if (this.balance_updates != null) {
                data.balance_updates = this.balance_updates.map((item: BalanceUpdate) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balance_updates.length)
                writer.writeRepeatedMessage(1, this.balance_updates, (item: BalanceUpdate) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventSetBalances {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventSetBalances();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balance_updates, () => pb_1.Message.addToRepeatedWrapperField(message, 1, BalanceUpdate.deserialize(reader), BalanceUpdate));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventSetBalances {
            return EventSetBalances.deserialize(bytes);
        }
    }
    export class BalanceUpdate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addr?: Uint8Array;
            denom?: Uint8Array;
            amt?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addr" in data && data.addr != undefined) {
                    this.addr = data.addr;
                }
                if ("denom" in data && data.denom != undefined) {
                    this.denom = data.denom;
                }
                if ("amt" in data && data.amt != undefined) {
                    this.amt = data.amt;
                }
            }
        }
        get addr() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set addr(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get denom() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set denom(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get amt() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set amt(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            addr?: Uint8Array;
            denom?: Uint8Array;
            amt?: string;
        }): BalanceUpdate {
            const message = new BalanceUpdate({});
            if (data.addr != null) {
                message.addr = data.addr;
            }
            if (data.denom != null) {
                message.denom = data.denom;
            }
            if (data.amt != null) {
                message.amt = data.amt;
            }
            return message;
        }
        toObject() {
            const data: {
                addr?: Uint8Array;
                denom?: Uint8Array;
                amt?: string;
            } = {};
            if (this.addr != null) {
                data.addr = this.addr;
            }
            if (this.denom != null) {
                data.denom = this.denom;
            }
            if (this.amt != null) {
                data.amt = this.amt;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addr.length)
                writer.writeBytes(1, this.addr);
            if (this.denom.length)
                writer.writeBytes(2, this.denom);
            if (this.amt.length)
                writer.writeString(3, this.amt);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BalanceUpdate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BalanceUpdate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.addr = reader.readBytes();
                        break;
                    case 2:
                        message.denom = reader.readBytes();
                        break;
                    case 3:
                        message.amt = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BalanceUpdate {
            return BalanceUpdate.deserialize(bytes);
        }
    }
}
