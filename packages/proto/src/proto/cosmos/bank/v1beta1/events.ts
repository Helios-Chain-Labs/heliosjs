// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v5.29.1
// source: cosmos/bank/v1beta1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "cosmos.bank.v1beta1";

/** EventSetBalance is an event that tracks the latest bank balance. */
export interface EventSetBalances {
  balanceUpdates: BalanceUpdate[];
}

/** BalanceUpdate contains a given address's latest balance */
export interface BalanceUpdate {
  addr: Uint8Array;
  denom: Uint8Array;
  /** the latest amount */
  amt: string;
}

function createBaseEventSetBalances(): EventSetBalances {
  return { balanceUpdates: [] };
}

export const EventSetBalances: MessageFns<EventSetBalances> = {
  encode(message: EventSetBalances, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.balanceUpdates) {
      BalanceUpdate.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventSetBalances {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSetBalances();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.balanceUpdates.push(BalanceUpdate.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSetBalances {
    return {
      balanceUpdates: globalThis.Array.isArray(object?.balanceUpdates)
        ? object.balanceUpdates.map((e: any) => BalanceUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: EventSetBalances): unknown {
    const obj: any = {};
    if (message.balanceUpdates?.length) {
      obj.balanceUpdates = message.balanceUpdates.map((e) => BalanceUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSetBalances>, I>>(base?: I): EventSetBalances {
    return EventSetBalances.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSetBalances>, I>>(object: I): EventSetBalances {
    const message = createBaseEventSetBalances();
    message.balanceUpdates = object.balanceUpdates?.map((e) => BalanceUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBalanceUpdate(): BalanceUpdate {
  return { addr: new Uint8Array(0), denom: new Uint8Array(0), amt: "" };
}

export const BalanceUpdate: MessageFns<BalanceUpdate> = {
  encode(message: BalanceUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.addr.length !== 0) {
      writer.uint32(10).bytes(message.addr);
    }
    if (message.denom.length !== 0) {
      writer.uint32(18).bytes(message.denom);
    }
    if (message.amt !== "") {
      writer.uint32(26).string(message.amt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BalanceUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBalanceUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.addr = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BalanceUpdate {
    return {
      addr: isSet(object.addr) ? bytesFromBase64(object.addr) : new Uint8Array(0),
      denom: isSet(object.denom) ? bytesFromBase64(object.denom) : new Uint8Array(0),
      amt: isSet(object.amt) ? globalThis.String(object.amt) : "",
    };
  },

  toJSON(message: BalanceUpdate): unknown {
    const obj: any = {};
    if (message.addr.length !== 0) {
      obj.addr = base64FromBytes(message.addr);
    }
    if (message.denom.length !== 0) {
      obj.denom = base64FromBytes(message.denom);
    }
    if (message.amt !== "") {
      obj.amt = message.amt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BalanceUpdate>, I>>(base?: I): BalanceUpdate {
    return BalanceUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BalanceUpdate>, I>>(object: I): BalanceUpdate {
    const message = createBaseBalanceUpdate();
    message.addr = object.addr ?? new Uint8Array(0);
    message.denom = object.denom ?? new Uint8Array(0);
    message.amt = object.amt ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
